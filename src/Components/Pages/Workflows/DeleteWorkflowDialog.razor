@using FlowSynx.Client.Messages.Requests.PluginConfig
@using FlowSynx.Client.Messages.Requests.Plugins
@using FlowSynx.Client.Messages.Requests.Workflows

@attribute [Authorize]
@inject IAccessTokenProvider TokenProvider
@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" /> Delete workflow
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>
            <strong>Are you sure you want to delete this workflow?</strong>
            <br /><br />
            <strong>Workflow name:</strong> @WorkflowName
            <br />
            <strong>Workflow Description:</strong> @WorkflowDescription
            <br /><br />
            <MudCard Outlined="true" Class="pa-3 mx-auto">
                <MudText Color="Color.Warning" Typo="Typo.subtitle2">
                    ⚠️ Warning: Deleting this workflow will permanently remove the workflow along with all related triggers, execution details, and history. Any processes or tasks depending on this workflow will no longer function. Please ensure you have backed up any important information before proceeding.
                </MudText>
            </MudCard>
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" 
                   StartIcon="@Icons.Material.Filled.Close"
                   Color="Color.Default"
                   Disabled="@IsProcessing"
                   Size="Size.Small"
                   OnClick="Cancel">Cancel</MudButton>

        <MudButton Color="Color.Error" 
                   StartIcon="@Icons.Material.Filled.DeleteForever"
                   Variant="Variant.Filled" 
                   Disabled="@IsProcessing"
                   Size="Size.Small"
                   OnClick="Delete">@(IsProcessing ? "Deleting..." : "Delete")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public Guid Id { get; set; } = Guid.Empty;

    [Parameter]
    public string WorkflowName { get; set; } = "";

    [Parameter]
    public string? WorkflowDescription { get; set; } = "";

    private bool IsProcessing = false;

    private void Cancel() => MudDialog.Cancel();

    private void BackdropHandler(MouseEventArgs e)
    {
        if (!IsProcessing)
            MudDialog.Cancel();
    }

    private void KeyHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Escape" && !IsProcessing)
            MudDialog.Cancel();
    }

    private async Task Delete()
    {
        try
        {
            IsProcessing = true;
            string? token;
            var accessTokenResult = await TokenProvider.GetAccessTokenAsync();

            if (string.IsNullOrEmpty(accessTokenResult))
                token = "No token available or user not authenticated.";
            else
                token = accessTokenResult;

            var authenticationStrategy = new FlowSynx.Client.Authentication.BearerTokenAuthStrategy(token);
            FlowSynxClient.SetAuthenticationStrategy(authenticationStrategy);

            var deletePluginConfigRequest = new DeleteWorkflowRequest() { Id = Id };
            var result = await FlowSynxClient.Workflows.DeleteAsync(deletePluginConfigRequest);
            if (result.StatusCode != 200)
            {
                SnackBar.Add("Server error while processing the request.", Severity.Error);
                return;
            }

            var payload = result.Payload;
            if (!payload.Succeeded)
            {
                foreach (var message in result.Payload.Messages)
                    SnackBar.Add($"Delete workflow error:\n{message}", Severity.Error);

                return;
            }
            else
            {
                SnackBar.Add("Workflow deleted successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Unexpected error: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsProcessing = false;
        }
    }
}