@page "/workflows/add"
@using FlowSynx.Client.Messages.Requests.Workflows
@inject IWorkflowService WorkflowService
@inject IJSRuntime JSRuntime

@attribute [Authorize]
@inject IAccessTokenProvider TokenProvider
@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar
@inject IDialogService DialogService
@inject NavigationManager Navigation

<PageTitle>FlowSynx add workflow</PageTitle>
<HeaderTitle Title="Workflow designer" Description="A visual interface to create, edit, and manage workflow." />

<MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true"
         ApplyEffectsToContainer="true" Class="mb-4">
    <MudTabPanel Text="Designer" Icon="@Icons.Material.Filled.DesignServices">
        <MudToolBar Dense="true" Gutters="false" Class="toolbar">
            <MudTooltip Text="Save workflow">
                <MudButton Variant="Variant.Filled"
                               Size="@Size.Medium"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Save"
                               Disabled="@IsProcessing"
                               OnClick="Save">
                               Save
                </MudButton>
            </MudTooltip>
            <MudTooltip Text="@(CurrentView == View.Code ? "Switch to Designer" : "Switch to JSON")">
                <MudIconButton Variant="Variant.Text"
                               Size="@Size.Medium"
                               Color="Color.Default"
                               Disabled="@IsProcessing"
                               Icon="@(CurrentView == View.Code ? Icons.Material.Filled.DesignServices : Icons.Material.Filled.Code)"
                               OnClick="ToggleCodeDesigner">
                </MudIconButton>
            </MudTooltip>
            @if (CurrentView == View.Designer)
            {
                <MudTooltip Text="Configure workflow">
                    <MudIconButton Variant="Variant.Text"
                                   Size="@Size.Medium"
                                   Color="Color.Default"
                                   Disabled="@IsProcessing"
                                   Icon="@Icons.Material.Filled.Settings"
                                   OnClick="ConfigureWorkflow">
                    </MudIconButton>
                </MudTooltip>
            }
        </MudToolBar>
        @RenderCurrentView()
    </MudTabPanel>
</MudTabs>

@code {
    private bool IsProcessing = false;
    private Workflow Workflow => WorkflowService.Get();
    private string? _workflowJson;
    private AddWorkflowRequest AddWorkflowRequest = new AddWorkflowRequest { Definition = "" };

    private View CurrentView { get; set; } = View.Designer;

    private void SwitchView(View view)
    {
        CurrentView = view;
    }

    private RenderFragment RenderCurrentView() => CurrentView switch
    {
        View.Code => @<WorkflowJsonEditor JsonContent="@_workflowJson"
                    JsonContentChanged="v => _workflowJson = v" />,
        View.Designer => @<WorkflowDesigner Workflow="@Workflow" />,
        _ => @<p>Unknown view</p>
    };

    private void ToggleCodeDesigner()
    {
        CurrentView = CurrentView == View.Code ? View.Designer : View.Code;
        if (CurrentView == View.Code)
        {
            WorkflowService.Set(Workflow);
            _workflowJson = WorkflowService.GetJson();
        }
        else
        {
            if (!string.IsNullOrWhiteSpace(_workflowJson))
            {
                WorkflowService.SetJson(_workflowJson);
            }
        }
    }

    private async Task Save()
    {
        try
        {
            IsProcessing = true;
            string? token;
            var accessTokenResult = await TokenProvider.GetAccessTokenAsync();

            if (string.IsNullOrEmpty(accessTokenResult))
                token = "No token available or user not authenticated.";
            else
                token = accessTokenResult;

            var authenticationStrategy = new FlowSynx.Client.Authentication.BearerTokenAuthStrategy(token);
            FlowSynxClient.SetAuthenticationStrategy(authenticationStrategy);

            if (CurrentView == View.Code)
            {
                if (string.IsNullOrWhiteSpace(_workflowJson))
                {
                    SnackBar.Add("Please provide a valid JSON definition.", Severity.Error);
                    return;
                }
                AddWorkflowRequest.Definition = _workflowJson;
            }
            else
            {
                AddWorkflowRequest.Definition = WorkflowService.GetJson();
            }

            var result = await FlowSynxClient.Workflows.AddAsync(AddWorkflowRequest);
            if (result.StatusCode != 200)
            {
                SnackBar.Add("Server error while processing the request.", Severity.Error);
                return;
            }

            var payload = result.Payload;
            if (!payload.Succeeded)
            {
                foreach (var message in result.Payload.Messages)
                    SnackBar.Add($"Add workflow error:\n{message}", Severity.Error);

                return;
            }
            else
            {
                var id = payload.Data.Id;
                SnackBar.Add("Workflow added successfully!", Severity.Success);
                Navigation.NavigateTo($"/workflows/{id.ToString()}/manage", true);
            }
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Unexpected error: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private async Task ConfigureWorkflow()
    {
        var options = new DialogOptions
            {
                CloseButton = false,
                MaxWidth = MaxWidth.Small,
                BackdropClick = false,
                CloseOnEscapeKey = false,
                BackgroundClass = "blur-dialog-background"
            };

        var parameters = new DialogParameters {
            { "Name", Workflow.Name },
            { "Description", Workflow.Description },
            { "Config", Workflow.Configuration }
        };

        var dialog = await DialogService.ShowAsync<ConfigureWorkflowDialog>("Configure workflow", parameters, options);
        var dialogResult = await dialog.Result;
        if (dialogResult != null && !dialogResult.Canceled)
            Workflow.Configuration = (WorkflowConfiguration)dialogResult.Data;
    }

    private enum View
    {
        Code,
        Designer
    }
}