@using FlowSynx.Client.Messages.Requests.Workflows
@using FlowSynx.Client.Messages.Responses.PluginConfig
@using FlowSynx.Client.Messages.Responses.Plugins
@using FlowSynx.Client.Messages.Responses.Workflows
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components

@attribute [Authorize]
@inject IAccessTokenProvider TokenProvider
@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar
@inject IDialogService DialogService
@inject NavigationManager Navigation

<MudTable T="WorkflowTriggersListResponse"
          ServerData="LoadData"
          Dense="true"
          Hover="true"
          Bordered="false"
          Striped="false"
          @ref="_table" LoadingProgressColor="Color.Primary">
    <ToolBarContent>
        <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Default" Size="@Size.Small"
                   StartIcon="@Icons.Material.Filled.Add" class="mr-1" OnClick="AddTrigger">Add config</MudButton>
        <MudButton DisableElevation Variant="Variant.Outlined" OnClick="Refresh" Size="@Size.Small"
                   StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Default">Refresh</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Trigger Type</MudTh>
        <MudTh>Status</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="cursor-pointer" DataLabel="Name">@context.Type</MudTd>
        <MudTd Class="cursor-pointer" DataLabel="Modified Date"><b>@context.Status</b></MudTd>
        <MudTd Class="cursor-pointer action-cell"
               Style="margin: 0px !important; padding:0px !important; text-align: right;">
            <div class="justify-end w-100 actions-toolbar mr-2">
                <MudToolBar Dense="true"
                            Gutters="false"
                            Class="internal-toolbar-height"
                            Style="text-align: right;">
                    <MudTooltip Text="Manage and execute workflow">
                        <MudIconButton Icon="@Icons.Material.Filled.EditNote"
                                       Color="Color.Primary"
                                       Size="@Size.Small"
                                       OnClick="@(() => ManageWorkflowExecution(@context.Id))" />
                    </MudTooltip>
                </MudToolBar>
            </div>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public Guid workflowId { get; set; }

    private MudTable<WorkflowTriggersListResponse>? _table;

    private async Task<TableData<WorkflowTriggersListResponse>> LoadData(
        TableState state,
        CancellationToken cancellationToken)
    {
        try
        {
            var accessTokenResult = await TokenProvider.GetAccessTokenAsync();

            string? token;
            if (string.IsNullOrEmpty(accessTokenResult))
                token = "No token available or user not authenticated.";
            else
                token = accessTokenResult;

            var authenticationStrategy = new FlowSynx.Client.Authentication.BearerTokenAuthStrategy(token);
            FlowSynxClient.SetAuthenticationStrategy(authenticationStrategy);

            var request = new WorkflowTriggersListRequest
            {
                WorkflowId = workflowId,
            };

            var result = await FlowSynxClient.Workflows.TriggersAsync(request, cancellationToken);

            if (result.StatusCode != 200)
            {
                SnackBar.Add("Failed to load plugins: Bad response code.", Severity.Error);
                return new TableData<WorkflowTriggersListResponse> { Items = [], TotalItems = 0 };
            }

            if (!result.Payload.Succeeded)
            {
                var errorMessage = string.Join(Environment.NewLine, result.Payload.Messages);
                SnackBar.Add($"Plugin config error:\n{errorMessage}", Severity.Error);
                return new TableData<WorkflowTriggersListResponse> { Items = [], TotalItems = 0 };
            }

            var workflows = result.Payload.Data.ToList();

            return new TableData<WorkflowTriggersListResponse>
                {
                    Items = workflows,
                    TotalItems = workflows.Count
                };
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Exception occurred: {ex.Message}", Severity.Error);
            return new TableData<WorkflowTriggersListResponse>
                {
                    Items = [],
                    TotalItems = 0
                };
        }
    }

    private async Task Refresh()
    {
        if (_table != null)
        {
            await _table.ReloadServerData();
        }
    }

    private void AddTrigger()
    {
        Navigation.NavigateTo("/workflows/add");
    }

    private void ManageWorkflowExecution(Guid id)
    {
        Navigation.NavigateTo($"/workflows/{id}/manage");
    }
}