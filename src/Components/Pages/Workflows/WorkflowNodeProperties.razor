@using MudBlazor

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" /> Properties
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (SelectedTask != null)
        {
            <MudGrid>
                <MudItem xs="12" md="12">
                    <MudTextField T="string" For="@(() => SelectedTask.Name)"
                                  @bind-Value="SelectedTask.Name"
                                  Label="Task name"
                                  Variant="Variant.Text"
                                  Margin="Margin.Dense"
                                  Immediate="true"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudTextField For="@(() => SelectedTask.Type)"
                                  @bind-Value="SelectedTask.Type"
                                  Label="Task type"
                                  Variant="Variant.Text"
                                  Margin="Margin.Dense"
                                  Immediate="true"
                                  Disabled="true" />
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudTextField For="@(() => dependencies)"
                                  @bind-Value="dependencies"
                                  Label="Dependencies (comma separated)"
                                  Variant="Variant.Text"
                                  Margin="Margin.Dense"
                                  Immediate="true"
                                  OnBlur="UpdateDepsFromText" />
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudText Typo="Typo.h6" Color="Color.Primary">Parameters</MudText>
                    @if (SelectedTask.Parameters == null || SelectedTask.Parameters.Count <= 0)
                    {
                        <MudText>No parameters defined</MudText>
                    }
                    else
                    {
                        @foreach (var kv in SelectedTask.Parameters.ToList())
                        {
                            <MudGrid Class="mb-2">
                                <MudItem xs="4">
                                    <MudTextField Value="@kv.Key" Disabled="true" />
                                </MudItem>
                                <MudItem xs="7">
                                    <MudTextField T="string"
                                                  Value="@kv.Value?.ToString()"
                                                  ValueChanged="@(v => SetParam(kv.Key, v))" />
                                </MudItem>
                                <MudItem xs="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Variant="Variant.Filled"
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   OnClick="@(() => RemoveParam(kv.Key))"></MudIconButton>
                                </MudItem>
                            </MudGrid>
                        }
                    }

                    <MudGrid>
                        <MudItem xs="4">
                            <MudTextField @bind-Value="_newKey" Placeholder="Key" />
                        </MudItem>
                        <MudItem xs="7">
                            <MudTextField @bind-Value="_newValue" Placeholder="Value" />
                        </MudItem>
                        <MudItem xs="1">
                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                           Size="Size.Small"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           OnClick="AddParam" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudText>No selection</MudText>
        }
    </DialogContent>

    <DialogActions>
        <MudButton DisableElevation Variant="Variant.Outlined"
                   StartIcon="@Icons.Material.Filled.Close"
                   Color="Color.Default"
                   Disabled="@IsProcessing"
                   Size="Size.Small"
                   OnClick="Cancel">Cancel</MudButton>

        <MudButton DisableElevation Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Save"
                   Color="Color.Primary"
                   Disabled="@IsProcessing"
                   Size="Size.Small"
                   OnClick="SaveAndClose">@(IsProcessing ? "Saving..." : "Save")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public WorkflowTask SelectedTask { get; set; } = default!;
    [Parameter] public EventCallback OnUpdated { get; set; } = default!;

    private string dependencies;
    private string _newKey;
    private string _newValue;
    private bool IsProcessing = false;

    protected override void OnInitialized()
    {
        dependencies = SelectedTask != null ? string.Join(',', SelectedTask.Dependencies) : string.Empty;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void UpdateDepsFromText() =>
        SelectedTask.Dependencies = dependencies?.Split(',')
            .Select(s => s.Trim())
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .ToList() ?? new();

    private void SetParam(string key, string value) => SelectedTask.Parameters[key] = value;

    private void RemoveParam(string key) => SelectedTask.Parameters.Remove(key);

    private void AddParam()
    {
        IsProcessing = true;
        if (!string.IsNullOrWhiteSpace(_newKey))
        {
            SelectedTask.Parameters[_newKey] = _newValue;
            _newKey = _newValue = null;
        }
        IsProcessing = false;
    }

    private async Task SaveAndClose()
    {
        await OnUpdated.InvokeAsync();
        MudDialog.Close();
    }
}