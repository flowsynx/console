@using FlowSynx.Client.Messages.Requests.PluginConfig
@using FlowSynx.Client.Messages.Requests.Plugins
@using FlowSynx.Client.Messages.Responses.PluginConfig
@using FlowSynx.Client.Messages.Responses.Plugins
@using MudBlazor

@attribute [Authorize]
@inject IAccessTokenProvider TokenProvider
@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" /> Workflow Configuration
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudTextField T="string" For="@(() => Name)"
                              @bind-Value="Name"
                              Label="Workflow name"
                              Variant="Variant.Text"
                              Margin="Margin.Dense"
                              Required="true" />
            </MudItem>

            <MudItem xs="12" sm="12">
                <MudTextField T="string" For="@(() => Description)"
                              @bind-Value="Description"
                              Label="Workflow description"
                              Variant="Variant.Text"
                              Margin="Margin.Dense"
                              Lines="3" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudNumericField T="int?" For="@(() => Config.Timeout)"
                                 @bind-Value="Config.Timeout"
                                 Label="Timeout (ms)"
                                 Required="true"
                                 Variant="Variant.Text"
                                 Margin="Margin.Dense"
                                 HelperText="Workflow timeout in milliseconds" />
            </MudItem>

            <!-- ErrorHandling Section -->
            <MudItem xs="12">
                <MudExpansionPanels Elevation="0" MultiExpansion="true"
                                    Dense="true"
                                    Outlined="false"
                                    Class="exp-panels-bordered">
                    <MudExpansionPanel Text="Error Handling">
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudSelect T="string" For="@(() => Config.ErrorHandling!.Strategy)"
                                           Label="Select Status"
                                           Variant="Variant.Text"
                                           Margin="Margin.Dense"
                                           Clearable="false"
                                           OpenIcon="@Icons.Material.Filled.ArrowDropDown"
                                           CloseIcon="@Icons.Material.Filled.ArrowDropUp"
                                           @bind-Value="Config.ErrorHandling!.Strategy">
                                    @foreach (var strategy in Enum.GetValues<ErrorStrategy>())
                                    {
                                        <MudSelectItem Value="@strategy.ToString().ToLower()">@strategy</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanel>

                    <!-- RetryPolicy Section -->
                    <MudExpansionPanel Text="Retry Policy">
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudNumericField T="int"
                                                 For="@(() => Config.ErrorHandling!.RetryPolicy!.MaxRetries)"
                                                 @bind-Value="Config.ErrorHandling!.RetryPolicy!.MaxRetries"
                                                 Label="Max Retries"
                                                 Variant="Variant.Text"
                                                 Margin="Margin.Dense" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudSelect T="string" For="@(() => Config.ErrorHandling!.RetryPolicy!.BackoffStrategy)"
                                           Label="Backoff Strategy"
                                           Variant="Variant.Text"
                                           Margin="Margin.Dense"
                                           Clearable="false"
                                           OpenIcon="@Icons.Material.Filled.ArrowDropDown"
                                           CloseIcon="@Icons.Material.Filled.ArrowDropUp"
                                           @bind-Value="Config.ErrorHandling!.RetryPolicy!.BackoffStrategy">
                                    @foreach (var strategy in Enum.GetValues<BackoffStrategy>())
                                    {
                                        <MudSelectItem Value="@strategy.ToString().ToLower()">@strategy</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudNumericField T="int" For="@(() => Config.ErrorHandling!.RetryPolicy!.InitialDelay)"
                                                 @bind-Value="Config.ErrorHandling!.RetryPolicy!.InitialDelay"
                                                 Label="Initial Delay (ms)"
                                                 Variant="Variant.Text"
                                                 Margin="Margin.Dense" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudNumericField T="int" For="@(() => Config.ErrorHandling!.RetryPolicy!.MaxDelay)"
                                                 @bind-Value="Config.ErrorHandling!.RetryPolicy!.MaxDelay"
                                                 Label="Max Delay (ms)"
                                                 Variant="Variant.Text"
                                                 Margin="Margin.Dense" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudNumericField T="double" For="@(() => Config.ErrorHandling!.RetryPolicy!.BackoffCoefficient)"
                                                 @bind-Value="Config.ErrorHandling!.RetryPolicy!.BackoffCoefficient"
                                                 Label="Backoff Coefficient"
                                                 Variant="Variant.Text"
                                                 Margin="Margin.Dense" />
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
        </MudGrid>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Outlined"
                   StartIcon="@Icons.Material.Filled.Close"
                   Color="Color.Default"
                   Disabled="@IsProcessing"
                   Size="Size.Small"
                   OnClick="Cancel">Cancel</MudButton>

        <MudButton Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Save"
                   Color="Color.Primary"
                   Disabled="@IsProcessing"
                   OnClick="Save"
                   Size="Size.Small">@(IsProcessing ? "Saving..." : "Save")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public string Name { get; set; } = string.Empty;

    [Parameter]
    public string? Description { get; set; }

    [Parameter]
    public WorkflowConfiguration Config { get; set; } = new();

    private bool IsProcessing = false;

    private void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        Config.ErrorHandling ??= new ErrorHandling();
        Config.ErrorHandling.RetryPolicy ??= new RetryPolicy();

        if (!string.IsNullOrWhiteSpace(Config.ErrorHandling.Strategy)){
            Config.ErrorHandling.Strategy = Config.ErrorHandling.Strategy.ToLower();
        }

        if (!string.IsNullOrWhiteSpace(Config.ErrorHandling!.RetryPolicy!.BackoffStrategy)){
            Config.ErrorHandling!.RetryPolicy!.BackoffStrategy = Config.ErrorHandling!.RetryPolicy!.BackoffStrategy.ToLower();
        }
    }

    private void Save()
    {
        try
        {
            IsProcessing = true;
            MudDialog.Close(DialogResult.Ok(Config));
        }
        catch (Exception)
        {
            // Handle any exceptions that may occur during the update process
        }
        finally
        {
            IsProcessing = false;
        }
    }

    public enum ErrorStrategy
    {
        Retry,
        Skip,
        Abort
    }

    public enum BackoffStrategy
    {
        Fixed,
        Linear,
        Exponential,
        Jitter
    }
}
