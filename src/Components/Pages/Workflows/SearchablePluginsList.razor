@using FlowSynx.Client.Messages.Responses.Plugins
@attribute [Authorize]
@inject IAccessTokenProvider TokenProvider
@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<MudTextField @bind-Value="_search"
              Placeholder="Search plugin..."
              Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search"
              Immediate="true"
              DebounceInterval="150"
              Clearable="true" />

<MudList T="string" Dense="true" Class="mt-1">
    @if (FilteredItems.Count == 0)
    {
        <MudListItem Disabled="true">
            <MudText Typo="Typo.caption" Color="Color.Secondary">No matches</MudText>
        </MudListItem>
    }
    else
    {
        @foreach (var item in FilteredItems)
        {
            <MudListItem OnClick="@(() => OnItemClick.InvokeAsync(item))">
                <MudText>@item</MudText>
            </MudListItem>
        }
    }
</MudList>

@code {
    [Parameter] public EventCallback<string> OnItemClick { get; set; }
    private List<string> Items { get; set; } = new();
    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Items = await LoadPluginTypes(CancellationToken.None);
    }

    private List<string> FilteredItems =>
        string.IsNullOrWhiteSpace(_search)
            ? Items
            : Items.Where(i => i.Contains(_search, StringComparison.OrdinalIgnoreCase)).ToList();

    private async Task<List<string>> LoadPluginTypes(CancellationToken cancellationToken)
    {
        try
        {
            var accessTokenResult = await TokenProvider.GetAccessTokenAsync();
            string? token;

            if (string.IsNullOrEmpty(accessTokenResult))
                token = "No token available or user not authenticated.";
            else
                token = accessTokenResult;

            var authenticationStrategy = new FlowSynx.Client.Authentication.BearerTokenAuthStrategy(token);
            FlowSynxClient.SetAuthenticationStrategy(authenticationStrategy);
            var result = await FlowSynxClient.Plugins.ListAsync(cancellationToken);

            if (result.StatusCode != 200)
            {
                SnackBar.Add("Failed to load plugins: Bad response code.", Severity.Error);
                return new List<string>();
            }

            if (!result.Payload.Succeeded)
            {
                var errorMessage = string.Join(Environment.NewLine, result.Payload.Messages);
                SnackBar.Add($"Plugin error:\n{errorMessage}", Severity.Error);
                return new List<string>();
            }

            return result.Payload.Data.Select(x=>x.Type).ToList();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Exception occurred: {ex.Message}", Severity.Error);
            return new List<string>();
        }
    }
}