@page "/plugins"
@using FlowSynx.Client.Messages.Responses.Plugins
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components

@attribute [Authorize]
@inject IAccessTokenProvider TokenProvider
@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar
@inject IDialogService DialogService

<PageTitle>FlowSynx Plugins</PageTitle>

<HeaderTitle Title="Installed plugins" Description="This section enumerates all plugins currently installed and available within the FlowSynx system. Each entry includes the plugin name, version, type, and a brief description of its functionality. " />

<MudTable T="PluginsListResponse"
          ServerData="LoadData"
          Dense="true"
          Hover="true"
          Bordered="false"
          Striped="false"
          @ref="_table" LoadingProgressColor="Color.Primary">
    <ToolBarContent>
        <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="@Size.Small"
                   StartIcon="@Icons.Material.Filled.Add" class="mr-3" OnClick="InstallPlugin">Install</MudButton>
        <MudButton DisableElevation Variant="Variant.Outlined" OnClick="Refresh" Size="@Size.Small"
                   StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary">Refresh</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Type</MudTh>
        <MudTh>Description</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name"><b>@context.Type</b></MudTd>
        <MudTd DataLabel="Type">@context.Description</MudTd>
        <MudTd Style="margin: 0px !important; padding:0px !important; text-align: right;">
            <MudToolBar Elevation="15" Dense="true" Style="text-align: right; margin: 0px !important; padding:0px !important">
                <MudIconButton Icon="@Icons.Material.Outlined.Info" 
                               Color="Color.Primary" 
                               Size="@Size.Small"
                               OnClick="@(() => PluginDetails(context.Id))" />

                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                               Color="Color.Primary" 
                               Size="@Size.Small" 
                               OnClick="@(() => UpdatePlugin(@context.Type, "1.1.0"))" />

                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                               Color="Color.Error" 
                               Size="@Size.Small" 
                               OnClick="@(() => UninstallPlugin(@context.Type, "1.1.0"))" />
            </MudToolBar>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string? token;
    private MudTable<PluginsListResponse>? _table;

    private async Task<TableData<PluginsListResponse>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var accessTokenResult = await TokenProvider.GetAccessTokenAsync();

            if (string.IsNullOrEmpty(accessTokenResult))
                token = "No token available or user not authenticated.";
            else
                token = accessTokenResult;

            var authenticationStrategy = new FlowSynx.Client.Authentication.BearerTokenAuthStrategy(token);
            FlowSynxClient.SetAuthenticationStrategy(authenticationStrategy);
            var result = await FlowSynxClient.Plugins.ListAsync(cancellationToken);

            if (result.StatusCode != 200)
            {
                SnackBar.Add("Failed to load plugins: Bad response code.", Severity.Error);
                return new TableData<PluginsListResponse> { Items = [], TotalItems = 0 };
            }

            if (!result.Payload.Succeeded)
            {
                var errorMessage = string.Join(Environment.NewLine, result.Payload.Messages);
                SnackBar.Add($"Plugin error:\n{errorMessage}", Severity.Error);
                return new TableData<PluginsListResponse> { Items = [], TotalItems = 0 };
            }

            var plugins = result.Payload.Data.ToList();

            return new TableData<PluginsListResponse>
                {
                    Items = plugins,
                    TotalItems = plugins.Count
                };
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Exception occurred: {ex.Message}", Severity.Error);
            return new TableData<PluginsListResponse>
                {
                    Items = [],
                    TotalItems = 0
                };
        }
    }

    private async Task Refresh()
    {
        if (_table != null)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task InstallPlugin()
    {
        var options = new DialogOptions
            {
                CloseButton = false,
                MaxWidth = MaxWidth.Small,
                BackdropClick = false,
                CloseOnEscapeKey = false,
                BackgroundClass = "blur-dialog-background"
            };

        var parameters = new DialogParameters { };

        var dialog = await DialogService.ShowAsync<InstallPluginDialog>("Install new plugin", parameters, options);
        var dialogResult = await dialog.Result;
        if (dialogResult != null && !dialogResult.Canceled)
            await Refresh();
    }

    private async Task UninstallPlugin(string type, string version)
    {
        var options = new DialogOptions
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            BackdropClick = true,
            CloseOnEscapeKey = true,
            BackgroundClass = "blur-dialog-background"
        };

        var parameters = new DialogParameters {
            { "PluginType", type },
            { "PluginVersion", version }
        };

        var dialog = await DialogService.ShowAsync<UninstallPluginDialog>("Uninstall plugin", parameters, options);
        var dialogResult = await dialog.Result;
        if (dialogResult != null && !dialogResult.Canceled)
            await Refresh();
    }

        private async Task UpdatePlugin(string type, string currentVersion)
    {
        var options = new DialogOptions
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            BackdropClick = false,
            CloseOnEscapeKey = false,
            BackgroundClass = "blur-dialog-background"
        };

        var parameters = new DialogParameters {
            { "PluginType", type },
            { "CurrentPluginVersion", currentVersion }
        };

        var dialog = await DialogService.ShowAsync<UpdatePluginDialog>("Update plugin", parameters, options);
        var dialogResult = await dialog.Result;
        if (dialogResult != null && !dialogResult.Canceled)
            await Refresh();
    }

    private async Task PluginDetails(Guid id)
    {
        var options = new DialogOptions
            {
                CloseButton = false,
                MaxWidth = MaxWidth.Small,
                BackdropClick = true,
                CloseOnEscapeKey = true,
                BackgroundClass = "blur-dialog-background"
            };

        var parameters = new DialogParameters {
            { "Id", id }
        };

        var dialog = await DialogService.ShowAsync<PluginDetailsDialog>("Plugin details", parameters, options);
        var dialogResult = await dialog.Result;
        if (dialogResult != null && !dialogResult.Canceled)
            await Refresh();
    }
}