@using FlowSynx.Client.Messages.Requests.Plugins
@using MudBlazor

@attribute [Authorize]
@inject IAccessTokenProvider TokenProvider
@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" /> Install plugin
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField For="@(() => InstallPluginRequest.Type)"
                              @bind-Value="InstallPluginRequest.Type"
                              Label="Type"
                              Required="true"
                              Variant="Variant.Text"
                              Margin="Margin.Dense"
                              HelperText="Enter the type of the plugin" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField For="@(() => InstallPluginRequest.Version)"
                              @bind-Value="InstallPluginRequest.Version"
                              Label="Version"
                              Required="true"
                              Variant="Variant.Text"
                              Margin="Margin.Dense"
                              HelperText="Enter the version of the plugin" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton DisableElevation Variant="Variant.Text" 
                                    StartIcon="@Icons.Material.Filled.Close"
                                    Color="Color.Default"
                                    Disabled="@IsProcessing"
                                    OnClick="Cancel">Cancel</MudButton>

        <MudButton DisableElevation Variant="Variant.Filled" 
                                    StartIcon="@Icons.Material.Filled.Save"
                                    Color="Color.Primary" 
                                    Disabled="@IsProcessing"
                                    OnClick="Install">@(IsProcessing ? "Processing..." : "Install")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private bool IsProcessing = false;
    private InstallPluginRequest InstallPluginRequest = new() { Type = string.Empty, Version = string.Empty };

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void BackdropHandler(MouseEventArgs e)
    {
        if (!IsProcessing)
            MudDialog.Cancel();
    }

    private void KeyHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Escape" && !IsProcessing)
            MudDialog.Cancel();
    }

    private async Task Install()
    {
        try
        {
            IsProcessing = true;
            string? token;
            var accessTokenResult = await TokenProvider.GetAccessTokenAsync();

            if (string.IsNullOrEmpty(accessTokenResult))
                token = "No token available or user not authenticated.";
            else
                token = accessTokenResult;

            var authenticationStrategy = new FlowSynx.Client.Authentication.BearerTokenAuthStrategy(token);
            FlowSynxClient.SetAuthenticationStrategy(authenticationStrategy);

            var result = await FlowSynxClient.Plugins.InstallAsync(InstallPluginRequest);
            if (result.StatusCode != 200)
            {
                SnackBar.Add("Server error while processing the request.", Severity.Error);
                return;
            }

            var payload = result.Payload;
            if (!payload.Succeeded)
            {
                var errorMessage = string.Join(Environment.NewLine, payload.Messages);
                SnackBar.Add($"Install plugin error:\n{errorMessage}", Severity.Error);
                return;
            }
            else
            {
                SnackBar.Add("Plugin installed successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Unexpected error: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsProcessing = false;
        }
    }
}