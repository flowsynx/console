@using FlowSynx.Client.Messages.Requests.PluginConfig
@using FlowSynx.Client.Messages.Requests.Plugins
@using FlowSynx.Client.Messages.Requests.Workflows

@attribute [Authorize]
@inject IAccessTokenProvider TokenProvider
@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" /> Delete workflow trigger
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>
            <strong>Are you sure you want to delete this workflow trigger?</strong>
            <br /><br />
            <strong>Trigger Type:</strong> @TriggerType
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" 
                   StartIcon="@Icons.Material.Filled.Close"
                   Color="Color.Default"
                   Disabled="@IsProcessing"
                   Size="Size.Small"
                   OnClick="Cancel">Cancel</MudButton>

        <MudButton Color="Color.Error" 
                   StartIcon="@Icons.Material.Filled.DeleteForever"
                   Variant="Variant.Filled" 
                   Disabled="@IsProcessing"
                   Size="Size.Small"
                   OnClick="Delete">@(IsProcessing ? "Deleting..." : "Delete")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public Guid WorkflowId { get; set; } = Guid.Empty;

    [Parameter]
    public Guid TriggerId { get; set; } = Guid.Empty;

    [Parameter]
    public string? TriggerType { get; set; } = "";

    private bool IsProcessing = false;

    private void Cancel() => MudDialog.Cancel();

    private void BackdropHandler(MouseEventArgs e)
    {
        if (!IsProcessing)
            MudDialog.Cancel();
    }

    private void KeyHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Escape" && !IsProcessing)
            MudDialog.Cancel();
    }

    private async Task Delete()
    {
        try
        {
            IsProcessing = true;
            string? token;
            var accessTokenResult = await TokenProvider.GetAccessTokenAsync();

            if (string.IsNullOrEmpty(accessTokenResult))
                token = "No token available or user not authenticated.";
            else
                token = accessTokenResult;

            var authenticationStrategy = new FlowSynx.Client.Authentication.BearerTokenAuthStrategy(token);
            FlowSynxClient.SetAuthenticationStrategy(authenticationStrategy);

            var deleteWorkflowTriggerRequest = new DeleteWorkflowTriggerRequest() { 
                WorkflowId = WorkflowId,
                TriggerId = TriggerId
            };
            var result = await FlowSynxClient.Workflows.DeleteTriggerAsync(deleteWorkflowTriggerRequest);
            if (result.StatusCode != 200)
            {
                SnackBar.Add("Server error while processing the request.", Severity.Error);
                return;
            }

            var payload = result.Payload;
            if (!payload.Succeeded)
            {
                foreach (var message in result.Payload.Messages)
                    SnackBar.Add($"Delete workflow trigger error:\n{message}", Severity.Error);

                return;
            }
            else
            {
                SnackBar.Add("Workflow trigger deleted successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Unexpected error: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsProcessing = false;
        }
    }
}