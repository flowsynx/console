@using FlowSynx.Client.Messages.Requests.PluginConfig
@using FlowSynx.Client.Messages.Requests.Plugins
@using FlowSynx.Client.Messages.Responses.Plugins
@using MudBlazor

@attribute [Authorize]
@inject IAccessTokenProvider TokenProvider
@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" /> Add plugin config
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField For="@(() => AddPluginConfigRequest.Name)"
                              @bind-Value="AddPluginConfigRequest.Name"
                              Label="Plugin config name"
                              Required="true"
                              Variant="Variant.Text"
                              Margin="Margin.Dense"
                              HelperText="Enter the type of the plugin" />
            </MudItem>
            <MudItem xs="12" md="12">
                <MudSelect T="string"
                    Label="Plugin Type" 
                    For="@(() => AddPluginConfigRequest.Type)" 
                    @bind-Value="AddPluginConfigRequest.Type" 
                    Variant="Variant.Text" 
                    Margin="Margin.Dense"
                    Clearable="false"
                    OpenIcon="@Icons.Material.Filled.ArrowDropDown"
                    CloseIcon="@Icons.Material.Filled.ArrowDropUp"
                    HelperText="Enter the type of plugin item">
                    @foreach (var plugin in PluginTypes)
                    {
                        <MudSelectItem Value="plugin.Type">@plugin.Type</MudSelectItem>
                    }
                    </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField For="@(() => AddPluginConfigRequest.Version)"
                              @bind-Value="AddPluginConfigRequest.Version"
                              Label="Plugin version"
                              Required="true"
                              Variant="Variant.Text"
                              Margin="Margin.Dense"
                              HelperText="Enter the version of the plugin" />
            </MudItem>
            <MudItem xs="12" md="12">
                <MudText Typo="Typo.h6" Color="Color.Primary">Specifications</MudText>
                <MudTable Items="_specifications" Hover="true" Breakpoint="Breakpoint.Sm" Dense="true">
                    <ToolBarContent>
                        <MudButton DisableElevation 
                            Variant="Variant.Outlined" 
                            Color="Color.Default" 
                            Size="@Size.Small"
                            Class="size-small-button"
                            OnClick="AddSpecification">Add specification item</MudButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Key</MudTh>
                        <MudTh>Value</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudTextField 
                                For="@(() => context.Key)" 
                                @bind-Value="context.Key" 
                                Variant="Variant.Text" 
                                Margin="Margin.Dense" />
                        </MudTd>
                        <MudTd>
                            <MudTextField 
                                For="@(() => context.Value)" 
                                @bind-Value="context.Value" 
                                Variant="Variant.Text" 
                                Margin="Margin.Dense" />
                        </MudTd>
                        <MudTd>
                            <MudIconButton 
                                Icon="@Icons.Material.Filled.Delete"
                                Variant="Variant.Text"
                                Color="Color.Error" 
                                Size="Size.Small" 
                                OnClick="@(() => DeleteSpecification(context.Id))"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton DisableElevation Variant="Variant.Outlined" 
                                    StartIcon="@Icons.Material.Filled.Close"
                                    Color="Color.Default"
                                    Disabled="@IsProcessing"
                                    Size="Size.Small"
                                    OnClick="Cancel">Cancel</MudButton>

        <MudButton DisableElevation Variant="Variant.Filled" 
                                    StartIcon="@Icons.Material.Filled.Add"
                                    Color="Color.Primary" 
                                    Disabled="@IsProcessing"
                                    Size="Size.Small"
                                    OnClick="Add">@(IsProcessing ? "Adding..." : "Add")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private bool IsProcessing = false;
    private List<TempKeyValue> _specifications = new List<TempKeyValue>();
    private IEnumerable<PluginsListResponse> PluginTypes = new List<PluginsListResponse>();
    private AddPluginConfigRequest AddPluginConfigRequest = new()
    {
        Name = "",
        Type = string.Empty,
        Version = string.Empty
    };

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void BackdropHandler(MouseEventArgs e)
    {
        if (!IsProcessing)
            MudDialog.Cancel();
    }

    private void KeyHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Escape" && !IsProcessing)
            MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        PluginTypes = await LoadPluginTypes(CancellationToken.None);
    }

    void AddSpecification()
    {
        _specifications.Add(new TempKeyValue(){Id = Guid.NewGuid()});
    }

    void DeleteSpecification(Guid id)
    {
        var item = _specifications.FirstOrDefault(x => x.Id == id);
        if (item != null)
            _specifications.Remove(item);
    }

    private async Task<IEnumerable<PluginsListResponse>> LoadPluginTypes(CancellationToken cancellationToken)
    {
        try
        {
            var accessTokenResult = await TokenProvider.GetAccessTokenAsync();
            string? token;

            if (string.IsNullOrEmpty(accessTokenResult))
                token = "No token available or user not authenticated.";
            else
                token = accessTokenResult;

            var authenticationStrategy = new FlowSynx.Client.Authentication.BearerTokenAuthStrategy(token);
            FlowSynxClient.SetAuthenticationStrategy(authenticationStrategy);
            var result = await FlowSynxClient.Plugins.ListAsync(cancellationToken);

            if (result.StatusCode != 200)
            {
                SnackBar.Add("Failed to load plugins: Bad response code.", Severity.Error);
                return new List<PluginsListResponse>();
            }

            if (!result.Payload.Succeeded)
            {
                foreach (var message in result.Payload.Messages)
                    SnackBar.Add($"Load plugins error:\n{message}", Severity.Error);
                return new List<PluginsListResponse>();
            }

            return result.Payload.Data.ToList();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Exception occurred: {ex.Message}", Severity.Error);
            return new List<PluginsListResponse>();
        }
    }

    private Task<IEnumerable<string>> SearchPluginTypes(string value, CancellationToken token)
    {
        return Task.FromResult(PluginTypes.Select(x => x.Type));
    }

    private async Task Add()
    {
        try
        {
            IsProcessing = true;
            string? token;
            var accessTokenResult = await TokenProvider.GetAccessTokenAsync();

            if (string.IsNullOrEmpty(accessTokenResult))
                token = "No token available or user not authenticated.";
            else
                token = accessTokenResult;

            var authenticationStrategy = new FlowSynx.Client.Authentication.BearerTokenAuthStrategy(token);
            FlowSynxClient.SetAuthenticationStrategy(authenticationStrategy);

            if (_specifications.Any())
            {
                Dictionary<string, object?> objDict = new Dictionary<string, object?>();
                foreach (var item in _specifications)
                {
                    if (!objDict.ContainsKey(item.Key))
                        objDict.Add(item.Key, item.Value);
                }
            
                AddPluginConfigRequest.Specifications = objDict;
            }
            else
            {
                AddPluginConfigRequest.Specifications = null;
            }

            var result = await FlowSynxClient.PluginConfig.AddAsync(AddPluginConfigRequest);
            if (result.StatusCode != 200)
            {
                SnackBar.Add("Server error while processing the request.", Severity.Error);
                return;
            }

            var payload = result.Payload;
            if (!payload.Succeeded)
            {
                foreach (var message in payload.Messages)
                    SnackBar.Add($"Add plugin config error:\n{message}", Severity.Error);

                return;
            }
            else
            {
                SnackBar.Add("Plugin config added successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Unexpected error: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private class TempKeyValue
    {
        public Guid Id { get; set; }
        public string Key { get; set; } = string.Empty;
        public string? Value { get; set; }
    }
}