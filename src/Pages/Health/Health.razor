@page "/health"
@using FlowSynx.Client
@using FlowSynx.Client.Messages.Responses.Health
@using Microsoft.AspNetCore.Components

@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<PageTitle>FlowSynx HealthCheck</PageTitle>

<HeaderTitle Title="HealthCheck" Description="Checking the health of FlowSynx system and its components" />

<MudTable 
    T="IndividualHealthCheckResponse" 
    ServerData="LoadData" 
    Dense="true" 
    Hover="true" 
    Bordered="false" 
    Striped="false" 
    @ref="_table" LoadingProgressColor="Color.Primary">
    <HeaderContent>
        <MudTh>Component</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Component"><b>@context.Component</b></MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
</MudTable>

@code {
    private MudTable<IndividualHealthCheckResponse>? _table;

    private async Task<TableData<IndividualHealthCheckResponse>> LoadData(
        TableState state, 
        CancellationToken cancellationToken)
    {
        try
        {
            var result = await FlowSynxClient.HealthCheck.Check(cancellationToken);

            if (result.StatusCode != 200)
            {
                SnackBar.Add("Failed to load plugins: Bad response code.", Severity.Error);
                return new TableData<IndividualHealthCheckResponse> { Items = [], TotalItems = 0 };
            }

            var plugins = result.Payload.HealthChecks;

            return new TableData<IndividualHealthCheckResponse>
                {
                    Items = plugins,
                    TotalItems = plugins.Count()
                };
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Exception occurred: {ex.Message}", Severity.Error);
            return new TableData<IndividualHealthCheckResponse>
                {
                    Items = [],
                    TotalItems = 0
                };
        }
    }
}