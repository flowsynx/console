@page "/plugins"
@using FlowSynx.Client
@using FlowSynx.Client.Messages.Responses.Plugins
@using Microsoft.AspNetCore.Components

@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<PageTitle>FlowSynx Plugins</PageTitle>

<HeaderTitle Title="Plugins list" Description="List of connectors supported by FlowSynx system" />

<MudTable 
    T="PluginsListResponse" 
    ServerData="LoadData" 
    Dense="true" 
    Hover="true" 
    Bordered="false" 
    Striped="false" 
    @ref="_table" LoadingProgressColor="Color.Primary">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Description</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name"><b>@context.Type</b></MudTd>
        <MudTd DataLabel="Type">@context.Description</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private MudTable<PluginsListResponse>? _table;

    private async Task<TableData<PluginsListResponse>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var result = await FlowSynxClient.Plugins.ListAsync(cancellationToken);

            if (result.StatusCode != 200)
            {
                SnackBar.Add("Failed to load plugins: Bad response code.", Severity.Error);
                return new TableData<PluginsListResponse> { Items = [], TotalItems = 0 };
            }

            if (!result.Payload.Succeeded)
            {
                var errorMessage = string.Join(Environment.NewLine, result.Payload.Messages);
                SnackBar.Add($"Plugin error:\n{errorMessage}", Severity.Error);
                return new TableData<PluginsListResponse> { Items = [], TotalItems = 0 };
            }

            var plugins = result.Payload.Data.ToList();

            return new TableData<PluginsListResponse>
                {
                    Items = plugins,
                    TotalItems = plugins.Count
                };
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Exception occurred: {ex.Message}", Severity.Error);
            return new TableData<PluginsListResponse>
                {
                    Items = [],
                    TotalItems = 0
                };
        }
    }
}