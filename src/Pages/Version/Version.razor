@page "/version"
@using FlowSynx.Client
@using FlowSynx.Client.Messages.Responses.Version
@using Microsoft.AspNetCore.Components

@inject IFlowSynxClient FlowSynxClient
@inject ISnackbar SnackBar

<PageTitle>FlowSynx Version</PageTitle>

<HeaderTitle Title="Version" Description="Information about FlowSynx version and hosting machine" />

<MudTable T="VersionResponse" ServerData="LoadData" Dense="true" Hover="true" Bordered="false" Striped="false" @ref="_table" LoadingProgressColor="Color.Primary">
    <HeaderContent>
        <MudTh>FlowSynx Version</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FlowSynx"><b>@context.Version</b></MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
</MudTable>

@code {
    private MudTable<VersionResponse>? _table;

    private async Task<TableData<VersionResponse>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        var response = new List<VersionResponse>();

        var result = await FlowSynxClient.Version.GetVersion(cancellationToken);
        if (result.StatusCode != 200)
            SnackBar.Add("It seems there is an error occurred during processing the request.", Severity.Error);

        var payload = result.Payload;
        if (payload.Succeeded)
        {
            response.Add(payload.Data);
        }
        else
        {
            foreach (var message in payload.Messages)
            {
                SnackBar.Add(message, Severity.Error);
            }
        }

        return new TableData<VersionResponse>
            {
                Items = response,
                TotalItems = response.Count()
            };
    }

    private async void OnSearch()
    {
        if (_table != null)
            await _table.ReloadServerData();
    }
}